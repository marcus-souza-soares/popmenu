openapi: 3.1.3
info:
  title: PopMenu Challenge API
  description: |
    Restaurant Menu Management System API
    
    ## Features
    - **Multi-Restaurant Management**: Full CRUD operations for restaurants
    - **Smart Menu System**: Create and manage multiple menus per restaurant
    - **Intelligent Menu Item Reusability**: Menu items are globally unique and can be shared across menus
    
    ## Key Concepts
    - **Nested Resources**: APIs follow RESTful nested resource pattern
    - **Item Reusability**: Adding an item with an existing name automatically reuses the existing item
    - **No Duplication**: Menu items are unique by name across the entire system
    - **JSON Format**: All endpoints require the `.json` extension for JSON responses
    - **Api V1**: In the future, we will have multiple versions of the API, so we will use the `v1` prefix for the endpoints.
    
  version: 1.0.0
  contact:
    name: Marcus Souza Soares
    url: https://github.com/marcus-souza-soares

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: Imports
    description: Bulk import operations for restaurant data from JSON files
  - name: Restaurants
    description: Restaurant management operations
  - name: Menus
    description: Menu management operations (nested under restaurants)
  - name: Menu Items
    description: Menu item management operations (nested under menus)

paths:
  /imports/restaurants:
    post:
      summary: Import restaurants from JSON
      description: |
        Bulk import restaurant data from JSON file or JSON request body.
        
        **Features:**
        - Accepts both `menu_items` and `dishes` keys
        - Automatically reuses menu items with the same name
        - Creates or updates restaurants, menus, and menu items
        - Provides detailed logs and results for each operation
        - Converts prices from dollars to cents automatically
        
        **Import Behavior:**
        - **Restaurants**: Creates new or reuses existing by name
        - **Menus**: Creates new menus for restaurants
        - **Menu Items**: Globally unique by name, reused across menus
        - **Prices**: Can be updated when reusing items
      operationId: importRestaurants
      tags:
        - Imports
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: JSON file containing restaurant data
            example:
              file: "@restaurant_data.json"
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantImportInput'
            example:
              restaurants:
                - name: "Poppo's Cafe"
                  menus:
                    - name: "lunch"
                      menu_items:
                        - name: "Burger"
                          price: 9.00
                        - name: "Small Salad"
                          price: 5.00
      responses:
        '201':
          description: Import completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSuccessResponse'
              example:
                success: true
                message: "Import completed successfully"
                summary:
                  restaurants: 2
                  menus: 3
                  menu_items: 4
                  assignments: 5
                results:
                  - restaurant_name: "Poppo's Cafe"
                    restaurant_id: 1
                    status: "success"
                    menus:
                      - menu_name: "lunch"
                        menu_id: 1
                        status: "success"
                        menu_items:
                          - item_name: "Burger"
                            menu_item_id: 1
                            price_in_cents: 900
                            status: "success"
                            action: "created"
                logs:
                  - level: "info"
                    message: "Successfully parsed JSON data"
        '422':
          description: Validation or parsing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportErrorResponse'
              example:
                success: false
                message: "Validation failed with 2 error(s)"
                validation_errors:
                  - path: "restaurants[0]"
                    message: "name is required"
                    severity: "error"
                logs:
                  - level: "error"
                    message: "restaurants[0]: name is required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportErrorResponse'
              example:
                success: false
                message: "An unexpected error occurred during import"
                error: "Unexpected error message"
                logs:
                  - level: "error"
                    message: "Unexpected error: Something went wrong"

  /restaurants.json:
    get:
      summary: List all restaurants
      description: Retrieve a list of all restaurants with their associated menus
      operationId: listRestaurants
      tags:
        - Restaurants
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Restaurant'
    post:
      summary: Create a restaurant
      description: Create a new restaurant
      operationId: createRestaurant
      tags:
        - Restaurants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInput'
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '422':
          description: Unprocessable entity - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /restaurants/{id}.json:
    parameters:
        - name: id
          in: path
          description: Restaurant ID
          required: true
          schema:
            type: integer
            format: int64
            example: 1
    get:
      summary: Get a restaurant
      description: Retrieve a specific restaurant by ID with its menus
      operationId: getRestaurant
      tags:
        - Restaurants
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a restaurant
      description: Update an existing restaurant
      operationId: updateRestaurant
      tags:
        - Restaurants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInput'
      responses:
        '200':
          description: Restaurant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Partially update a restaurant
      description: Partially update an existing restaurant
      operationId: patchRestaurant
      tags:
        - Restaurants
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInput'
      responses:
        '200':
          description: Restaurant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a restaurant
      description: Delete an existing restaurant and all its menus
      operationId: deleteRestaurant
      tags:
        - Restaurants
      responses:
        '204':
          description: Restaurant deleted successfully
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - could not delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /restaurants/{restaurant_id}/menus.json:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID
        required: true
        schema:
          type: integer
          format: int64
          example: 1
    get:
      summary: List menus for a restaurant
      description: Retrieve all menus for a specific restaurant
      operationId: listMenus
      tags:
        - Menus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a menu
      description: Create a new menu for a restaurant
      operationId: createMenu
      tags:
        - Menus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuInput'
      responses:
        '201':
          description: Menu created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /restaurants/{restaurant_id}/menus/{id}.json:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID
        required: true
        schema:
          type: integer
          format: int64
          example: 1
      - name: id
        in: path
        required: true
        description: The unique identifier of the menu
        schema:
          type: integer
          format: int64
          example: 1
    get:
      summary: Get a menu
      description: Retrieve a specific menu with its menu items
      operationId: getMenu
      tags:
        - Menus
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          description: Restaurant or menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a menu
      description: Update an existing menu
      operationId: updateMenu
      tags:
        - Menus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuInput'
      responses:
        '200':
          description: Menu updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          description: Restaurant or menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Partially update a menu
      description: Partially update an existing menu
      operationId: patchMenu
      tags:
        - Menus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuInput'
      responses:
        '200':
          description: Menu updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '404':
          description: Restaurant or menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a menu
      description: Delete an existing menu and remove all menu item associations
      operationId: deleteMenu
      tags:
        - Menus
      responses:
        '204':
          description: Menu deleted successfully
        '404':
          description: Restaurant or menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - could not delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /restaurants/{restaurant_id}/menus/{menu_id}/menu_items.json:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID
        required: true
        schema:
          type: integer
          format: int64
          example: 1
      - name: menu_id
        in: path
        required: true
        description: Menu ID
        schema:
          type: integer
          format: int64
          example: 1
    get:
      summary: List menu items for a menu
      description: Retrieve all menu items for a specific menu
      operationId: listMenuItems
      tags:
        - Menu Items
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        '404':
          description: Restaurant or menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add a menu item to a menu
      description: |
        Create or add a menu item to a menu. If a menu item with the same name already exists, 
        it will be reused and associated with this menu. Price can be updated if provided.
      operationId: createMenuItem
      tags:
        - Menu Items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemInput'
      responses:
        '201':
          description: Menu item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '404':
          description: Restaurant or menu not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /restaurants/{restaurant_id}/menus/{menu_id}/menu_items/{id}.json:
    parameters:
      - name: restaurant_id
        in: path
        description: Restaurant ID
        required: true
        schema:
          type: integer
          format: int64
          example: 1
      - name: menu_id
        in: path
        required: true
        description: Menu ID
        schema:
          type: integer
          format: int64
          example: 1
      - name: id
        in: path
        required: true
        description: The unique identifier of the menu item
        schema:
          type: integer
          format: int64
          example: 1
    get:
      summary: Get a menu item
      description: Retrieve a specific menu item from a menu
      operationId: getMenuItem
      tags:
        - Menu Items
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '404':
          description: Restaurant, menu, or menu item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove a menu item from a menu
      description: |
        Remove a menu item from a specific menu. This only removes the association between 
        the menu and the menu item; it does not delete the menu item itself.
      operationId: removeMenuItem
      tags:
        - Menu Items
      responses:
        '204':
          description: Menu item removed from menu successfully
        '404':
          description: Restaurant, menu, or menu item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable entity - could not remove
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the restaurant
          example: 1
        name:
          type: string
          description: Name of the restaurant
          example: "Joe's Pizza"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the restaurant was created
          example: "2024-10-20T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the restaurant was last updated
          example: "2024-10-20T12:00:00Z"
        url:
          type: string
          format: uri
          description: URL to access this restaurant resource
          example: "http://localhost:3000/restaurants/1.json"
        menus:
          type: array
          description: List of menus associated with this restaurant
          items:
            $ref: '#/components/schemas/MenuSummary'
      required:
        - id
        - name
        - created_at
        - updated_at
        - url

    RestaurantInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the restaurant
          example: "Joe's Pizza"
          minLength: 1
      required:
        - name

    Menu:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the menu
          example: 1
        name:
          type: string
          description: Name of the menu
          example: "Lunch Menu"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the menu was created
          example: "2024-10-20T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the menu was last updated
          example: "2024-10-20T12:00:00Z"
        url:
          type: string
          format: uri
          description: URL to access this menu resource
          example: "http://localhost:3000/restaurants/1/menus/1.json"
        menu_items:
          type: array
          description: List of menu items on this menu
          items:
            $ref: '#/components/schemas/MenuItemSummary'
      required:
        - id
        - name
        - created_at
        - updated_at
        - url

    MenuInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the menu
          example: "Lunch Menu"
          minLength: 1
      required:
        - name

    MenuSummary:
      type: object
      description: Abbreviated menu information for nested responses
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the menu
          example: 1
        name:
          type: string
          description: Name of the menu
          example: "Lunch Menu"
        url:
          type: string
          format: uri
          description: URL to access this menu resource
          example: "http://localhost:3000/restaurants/1/menus/1.json"
      required:
        - id
        - name
        - url

    MenuItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the menu item
          example: 1
        name:
          type: string
          description: Name of the menu item
          example: "Margherita Pizza"
        price_in_cents:
          type: integer
          description: Price of the menu item in cents
          example: 1299
          minimum: 1
        created_at:
          type: string
          format: date-time
          description: Timestamp when the menu item was created
          example: "2024-10-20T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the menu item was last updated
          example: "2024-10-20T12:00:00Z"
      required:
        - id
        - name
        - price_in_cents
        - created_at
        - updated_at

    MenuItemInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the menu item
          example: "Margherita Pizza"
          minLength: 1
        price_in_cents:
          type: integer
          description: Price of the menu item in cents
          example: 1299
          minimum: 1
      required:
        - name
        - price_in_cents

    MenuItemSummary:
      type: object
      description: Abbreviated menu item information for nested responses
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the menu item
          example: 1
        name:
          type: string
          description: Name of the menu item
          example: "Margherita Pizza"
        price_in_cents:
          type: integer
          description: Price of the menu item in cents
          example: 1299
        url:
          type: string
          format: uri
          description: URL to access this menu item resource
          example: "http://localhost:3000/restaurants/1/menus/1/menu_items/1.json"
      required:
        - id
        - name
        - price_in_cents
        - url

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Restaurant not found"
        errors:
          type: object
          description: Validation errors (for 422 responses)
          additionalProperties:
            type: array
            items:
              type: string
          example:
            name: ["can't be blank"]

    RestaurantImportInput:
      type: object
      description: JSON structure for importing restaurant data
      properties:
        restaurants:
          type: array
          description: Array of restaurants to import
          items:
            type: object
            properties:
              name:
                type: string
                description: Restaurant name
                example: "Poppo's Cafe"
              menus:
                type: array
                description: Array of menus for this restaurant
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Menu name
                      example: "lunch"
                    menu_items:
                      type: array
                      description: Array of menu items (can also use 'dishes' key)
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: Item name
                            example: "Burger"
                          price:
                            type: number
                            format: float
                            description: Price in dollars (will be converted to cents)
                            example: 9.00
                        required:
                          - name
                          - price
                    dishes:
                      type: array
                      description: Alternative key for menu items
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Chicken Wings"
                          price:
                            type: number
                            format: float
                            example: 9.00
                  required:
                    - name
            required:
              - name
              - menus
      required:
        - restaurants

    ImportSuccessResponse:
      type: object
      description: Successful import response
      properties:
        success:
          type: boolean
          description: Import success status
          example: true
        message:
          type: string
          description: Summary message
          example: "Import completed successfully"
        summary:
          type: object
          description: Summary of created/updated records
          properties:
            restaurants:
              type: integer
              description: Number of restaurants created
              example: 2
            menus:
              type: integer
              description: Number of menus created
              example: 3
            menu_items:
              type: integer
              description: Number of menu items created
              example: 4
            assignments:
              type: integer
              description: Number of menu-item associations created
              example: 5
        results:
          type: array
          description: Detailed results for each restaurant
          items:
            type: object
            properties:
              restaurant_name:
                type: string
                example: "Poppo's Cafe"
              restaurant_id:
                type: integer
                example: 1
              status:
                type: string
                enum: [success, failed]
                example: "success"
              menus:
                type: array
                items:
                  type: object
                  properties:
                    menu_name:
                      type: string
                      example: "lunch"
                    menu_id:
                      type: integer
                      example: 1
                    status:
                      type: string
                      enum: [success, failed]
                      example: "success"
                    menu_items:
                      type: array
                      items:
                        type: object
                        properties:
                          item_name:
                            type: string
                            example: "Burger"
                          menu_item_id:
                            type: integer
                            example: 1
                          price_in_cents:
                            type: integer
                            example: 900
                          status:
                            type: string
                            enum: [success, failed]
                            example: "success"
                          action:
                            type: string
                            enum: [created, updated, reused]
                            description: Action taken on the menu item
                            example: "created"
                          assignment_id:
                            type: integer
                            example: 1
        logs:
          type: array
          description: Detailed log messages from the import process
          items:
            type: object
            properties:
              level:
                type: string
                enum: [info, warn, error]
                description: Log level
                example: "info"
              message:
                type: string
                description: Log message
                example: "Successfully parsed JSON data"
      required:
        - success
        - message
        - summary
        - results
        - logs

    ImportErrorResponse:
      type: object
      description: Import error response
      properties:
        success:
          type: boolean
          description: Import success status
          example: false
        message:
          type: string
          description: Error message
          example: "Validation failed with 2 error(s)"
        validation_errors:
          type: array
          description: Validation errors (if validation failed)
          items:
            type: object
            properties:
              path:
                type: string
                description: Path to the field with error
                example: "restaurants[0]"
              message:
                type: string
                description: Error message
                example: "name is required"
              severity:
                type: string
                enum: [error, warning]
                example: "error"
        adapter_errors:
          type: array
          description: Adapter errors (if data transformation failed)
          items:
            type: object
            properties:
              path:
                type: string
                example: "restaurants[0].menus[0]"
              message:
                type: string
                example: "must be an object"
        error:
          type: string
          description: Unexpected error message (for 500 responses)
          example: "Unexpected error"
        logs:
          type: array
          description: Log messages from the import process
          items:
            type: object
            properties:
              level:
                type: string
                enum: [info, warn, error]
                example: "error"
              message:
                type: string
                example: "JSON parsing failed"
      required:
        - success
        - message
        - logs
